name: (Prod) Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      targetBranch: # set this to your branch, e.g. master
        required: true
        type: string
      dockerFilePath: # set this to your docker file path, e.g. docker/product.dockerfile
        required: true
        type: string
      dockerRootPath: # set this to your docker root path, e.g. docker/
        required: true
        type: string
      awsRegion: # set this to your preferred AWS region, e.g. ap-northeast-1
        required: true
        type: string
      ecrRepository: # set this to your Amazon ECR repository name
        required: true
        type: string
      ecsCluster: # set this to your Amazon ECS cluster name
        required: true
        type: string
      ecsService: # set this to your Amazon ECS service name
        required: true
        type: string
      ecsTaskDefinition: # set this to the path to your Amazon ECS task definition, e.g. .aws/task-definition.json
        required: true
        type: string
      ecsContainerName: # set this to the name of the container in the containerDefinitions section of your task definition
        required: true
        type: string
    secrets:
      awsAccessKeyId:
        required: true
      awsSecretAccessKey:
        required: true

jobs:
  check-branch:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Branch Name
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "BRANCH=$branch" >> $GITHUB_ENV

      - name: Check Branch Name
        if: env.BRANCH != env.TARGET_BRANCH
        run: exit 1
        env:
          TARGET_BRANCH: ${{ inputs.targetBranch }}

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: check-branch

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.awsAccessKeyId }}
          aws-secret-access-key: ${{ secrets.awsSecretAccessKey }}
          aws-region: ${{ inputs.awsRegion }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          DOCKER_FILE_PATH: ${{ inputs.dockerFilePath }}
          DOCKER_ROOT_PATH: ${{ inputs.dockerRootPath }}
          ECR_REPOSITORY: ${{ inputs.ecrRepository }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.ref_name }} # use tag name
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_FILE_PATH $DOCKER_ROOT_PATH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ecsTaskDefinition }}
          container-name: ${{ inputs.ecsContainerName }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecsService }}
          cluster: ${{ inputs.ecsCluster }}
          wait-for-service-stability: true
