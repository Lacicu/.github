name: Deploy Image to Amazon ECR

on:
  workflow_call:
    inputs:
      useTag: # set bool choose to use tag
        type: boolean
        required: false
        default: false
      dockerFilePath: # set this to your docker file path, e.g. docker/product.dockerfile
        required: true
        type: string
      dockerRootPath: # set this to your docker root path, e.g. docker/
        required: true
        type: string
      awsRegion: # set this to your preferred AWS region, e.g. ap-northeast-1
        required: true
        type: string
      ecrRepository: # set this to your Amazon ECR repository name
        required: true
        type: string
    secrets:
      awsAccessKeyId:
        required: true
      awsSecretAccessKey:
        required: true
    outputs:
      image:
        description: "Name of the uploaded image"
        value: ${{ jobs.deploy.outputs.image }}

jobs:
  deploy:
    name: upload-image
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.awsAccessKeyId }}
          aws-secret-access-key: ${{ secrets.awsSecretAccessKey }}
          aws-region: ${{ inputs.awsRegion }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          DOCKER_FILE_PATH: ${{ inputs.dockerFilePath }}
          DOCKER_ROOT_PATH: ${{ inputs.dockerRootPath }}
          ECR_REPOSITORY: ${{ inputs.ecrRepository }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          USE_TAG: ${{ inputs.useTag }}
          IMAGE_TAG_SHA: ${{ github.sha }}
          IMAGE_TAG_NAME: ${{ github.ref_name }}
        run: |
          if "${USE_TAG}"; then
            IMAGE_TAG=$IMAGE_TAG_NAME
          else
            IMAGE_TAG=$IMAGE_TAG_SHA
          fi
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_FILE_PATH $DOCKER_ROOT_PATH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"